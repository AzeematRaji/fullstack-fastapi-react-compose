services:
  backend:
    build: ./backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.priority=2"
      - "traefik.http.middlewares.backend-strip-prefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"  
      - "traefik.http.routers.backend.middlewares=backend-strip-prefix"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

      
      #- "traefik.http.routers.backend-docs.rule=Host(`${DOMAIN}`) && (PathPrefix(`/docs`)"
      #- "traefik.http.routers.backend-docs.entrypoints=websecure"
      #- "traefik.http.routers.backend-docs.tls=true"
      #- "traefik.http.routers.backend-docs.middlewares=docs-rewrite"
      #- "traefik.http.routers.backend-docs.service=backend"

       # Middleware to rewrite /docs â†’ /api/v1/docs
      #- "traefik.http.middlewares.docs-rewrite.stripprefixregex.regex=^/docs"
      #- "traefik.http.middlewares.docs-rewrite.addprefix.prefix=/api/v1/docs"


    depends_on:
      - db
    env_file:
      - ./backend/.env
    networks:
      - app-mon-network

  frontend:
    build: ./frontend 
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"
    depends_on:
      - backend
    env_file:
      - ./frontend/.env
    networks:
      - app-mon-network

  db:
    image: postgres:15
    env_file:
      - ./backend/.env
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-mon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "5432:5432"

  adminer:
    image: adminer
    restart: always
    depends_on:
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`db.${DOMAIN}`) || (Host(`${DOMAIN}`) && PathPrefix(`/db`))"
      - "traefik.http.middlewares.adminer-strip.stripprefix.prefixes=/db"
      - "traefik.http.routers.adminer.middlewares=adminer-strip"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.routers.adminer.tls.certresolver=myresolver"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
      - "traefik.http.routers.adminer.priority=10"

    networks:
      - app-mon-network

  traefik:
    image: traefik:v3.0
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=azeematjumoke@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # Redirect HTTP to HTTPs
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

    labels:
      - "traefik.enable=true"
      # Dashboard configuration
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      # Global redirect HTTP to HTTPS
      - "traefik.http.middlewares.httpsredirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.httpsredirect.redirectscheme.permanent=true"
      - "traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.redirs.entrypoints=web"
      - "traefik.http.routers.redirs.middlewares=httpsredirect"

    ports:
      - "80:80"
      - "443:443"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    networks:
      - app-mon-network



volumes:
  db_data:

networks:
  app-mon-network:
    external: true

