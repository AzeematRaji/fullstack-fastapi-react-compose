services:
  backend:
    build: ./backend
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      #- "traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/api`)"
      #- "traefik.http.routers.backend.rule=Host(`api.localhost`)"
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"

    depends_on:
      - db
    env_file:
      - ./backend/.env
    networks:
      - app-mon-network

  frontend:
    build: ./frontend 
    labels:
      - "traefik.enable=true"
      #- "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"
 
    depends_on:
      - backend
    env_file:
      - ./frontend/.env
    networks:
      - app-mon-network

  db:
    image: postgres:15
    env_file:
      - ./backend/.env
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-mon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "5432:5432"

  adminer:
    image: adminer
    restart: always
    depends_on:
      - db
    labels:
      #- "traefik.http.routers.adminer.rule=Host(`localhost`) && PathPrefix(`/db`)"
      - "traefik.http.routers.adminer.entrypoints=web"
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`db.${DOMAIN}`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls.certresolver=myresolver"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"

    networks:
      - app-mon-network

  traefik:
    image: traefik:v3.0
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=azeematjumoke@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # Redirect HTTP to HTTPs
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

    labels:
      - "traefik.enable=true"
      # Redirect www to non-www
      - "traefik.http.routers.redirect-www.rule=Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.redirect-www.entrypoints=websecure"
      - "traefik.http.routers.redirect-www.middlewares=redirect-to-non-www"
      - "traefik.http.routers.redirect-www.tls.certresolver=myresolver"

      - "traefik.http.middlewares.redirect-to-non-www.redirectregex.regex=^https?://www\\.(.*)"
      - "traefik.http.middlewares.redirect-to-non-www.redirectregex.replacement=https://$1"
      - "traefik.http.middlewares.redirect-to-non-www.redirectregex.permanent=true"

    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    networks:
      - app-mon-network



volumes:
  db_data:

networks:
  app-mon-network:
    external: true

